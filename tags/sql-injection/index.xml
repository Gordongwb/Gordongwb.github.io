<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SQL Injection on Gordon&#39;s Blog</title>
    <link>https://gordongwb.github.io/tags/sql-injection/</link>
    <description>Recent content in SQL Injection on Gordon&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 25 Dec 2019 21:33:03 +0800</lastBuildDate>
    
	<atom:link href="https://gordongwb.github.io/tags/sql-injection/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>EASY SQL_Injection</title>
      <link>https://gordongwb.github.io/tech/easy-sql_injection/</link>
      <pubDate>Wed, 25 Dec 2019 21:33:03 +0800</pubDate>
      
      <guid>https://gordongwb.github.io/tech/easy-sql_injection/</guid>
      <description>sql_injection  以 mysql 为例， 不同数据库的特殊情况另行整理
 0x00 判断注入点 1 and 1=1 返回正常， 1 and 1=2 返回错误说明存在注入点 (以上为数字型，字符串型应加引号，如 1&#39;and’1&#39;=‘1)
0x01 判断字段数（列数） 使用 order by &amp;lt;num&amp;gt; , 根据返回判断列数，当 &amp;lt;num&amp;gt; 大于最大列数时，将返回错误
0x02 匹配字段位置 根据字段数构造联合查询语句 id=1 and 1=2 union select 1,2,...n ， n 即为字段数，根据不同数字在页面中出现的位置，选择合适的字段作为 payload 对数据库中的信息进行查询
0x03 内置函数和系统数据库 version() 版本信息 database() 当前数据库 user() 当前用户
 and ord(mid(user(),1,1))=114  //即 user() 以字母 ’r‘ 开头  @@global.version_compile_os from mysql.user
0x04 使用 mysql 的数据库的系统库获取信息 （mysql 5 以上）information_schema select SCHEME_NAME from information_schema.</description>
    </item>
    
  </channel>
</rss>